import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

async function main() {
  console.log('üå± Iniciando seed da rede social...')

  // Limpar dados existentes
  console.log('üßπ Limpando dados existentes...')
  await prisma.socialMention.deleteMany()
  await prisma.socialShare.deleteMany()
  await prisma.socialLike.deleteMany()
  await prisma.socialComment.deleteMany()
  await prisma.socialPost.deleteMany()
  await prisma.connection.deleteMany()
  await prisma.userProfile.deleteMany()
  await prisma.user.deleteMany()

  // Criar usu√°rios
  console.log('üë• Criando usu√°rios...')
  const users = await Promise.all([
    prisma.user.create({
      data: {
        email: 'admin@acodelab.com',
        username: 'admin',
        name: 'Administrador',
        password: await bcrypt.hash('admin123', 10),
        avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=admin',
        reputation: 1000,
        level: 'MASTER',
        isVerified: true,
        bio: 'Administrador da plataforma Acode Lab'
      }
    }),
    prisma.user.create({
      data: {
        email: 'joao@acodelab.com',
        username: 'joao_dev',
        name: 'Jo√£o Silva',
        password: await bcrypt.hash('joao123', 10),
        avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=joao',
        reputation: 850,
        level: 'EXPERT',
        isVerified: true,
        bio: 'Desenvolvedor Full Stack apaixonado por React e Node.js'
      }
    }),
    prisma.user.create({
      data: {
        email: 'maria@acodelab.com',
        username: 'maria_ux',
        name: 'Maria Santos',
        password: await bcrypt.hash('maria123', 10),
        avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=maria',
        reputation: 720,
        level: 'ADVANCED',
        isVerified: true,
        bio: 'UX/UI Designer especializada em interfaces intuitivas'
      }
    }),
    prisma.user.create({
      data: {
        email: 'pedro@acodelab.com',
        username: 'pedro_mobile',
        name: 'Pedro Costa',
        password: await bcrypt.hash('pedro123', 10),
        avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=pedro',
        reputation: 650,
        level: 'INTERMEDIATE',
        isVerified: false,
        bio: 'Desenvolvedor Mobile focado em React Native'
      }
    }),
    prisma.user.create({
      data: {
        email: 'ana@acodelab.com',
        username: 'ana_backend',
        name: 'Ana Oliveira',
        password: await bcrypt.hash('ana123', 10),
        avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=ana',
        reputation: 580,
        level: 'INTERMEDIATE',
        isVerified: false,
        bio: 'Desenvolvedora Backend com experi√™ncia em Python e Django'
      }
    })
  ])

  // Criar perfis de usu√°rio
  console.log('üë§ Criando perfis de usu√°rio...')
  const profiles = await Promise.all([
    prisma.userProfile.create({
      data: {
        userId: users[1].id, // Jo√£o
        displayName: 'Jo√£o Silva',
        bio: 'Desenvolvedor Full Stack com 5+ anos de experi√™ncia. Especialista em React, Node.js e TypeScript. Apaixonado por c√≥digo limpo e arquitetura escal√°vel.',
        skills: ['React', 'Node.js', 'TypeScript', 'PostgreSQL', 'Docker', 'AWS'],
        experience: '5+ anos desenvolvendo aplica√ß√µes web e mobile',
        education: 'Bacharel em Ci√™ncia da Computa√ß√£o - UFMG',
        company: 'TechCorp',
        jobTitle: 'Senior Full Stack Developer',
        location: 'Belo Horizonte, MG',
        timezone: 'America/Sao_Paulo',
        isAvailable: true,
        hourlyRate: 150.00,
        portfolio: [
          'https://github.com/joaosilva',
          'https://joaosilva.dev',
          'https://linkedin.com/in/joaosilva'
        ],
        socialLinks: {
          github: 'https://github.com/joaosilva',
          linkedin: 'https://linkedin.com/in/joaosilva',
          twitter: 'https://twitter.com/joaosilva'
        }
      }
    }),
    prisma.userProfile.create({
      data: {
        userId: users[2].id, // Maria
        displayName: 'Maria Santos',
        bio: 'UX/UI Designer com foco em experi√™ncias digitais memor√°veis. Especialista em Design Systems e pesquisa com usu√°rios.',
        skills: ['Figma', 'Adobe XD', 'Sketch', 'User Research', 'Prototyping', 'Design Systems'],
        experience: '4+ anos criando interfaces intuitivas e acess√≠veis',
        education: 'Design Gr√°fico - PUC Minas',
        company: 'DesignStudio',
        jobTitle: 'Senior UX/UI Designer',
        location: 'S√£o Paulo, SP',
        timezone: 'America/Sao_Paulo',
        isAvailable: true,
        hourlyRate: 120.00,
        portfolio: [
          'https://behance.net/mariasantos',
          'https://mariasantos.design',
          'https://dribbble.com/mariasantos'
        ],
        socialLinks: {
          behance: 'https://behance.net/mariasantos',
          dribbble: 'https://dribbble.com/mariasantos',
          linkedin: 'https://linkedin.com/in/mariasantos'
        }
      }
    }),
    prisma.userProfile.create({
      data: {
        userId: users[3].id, // Pedro
        displayName: 'Pedro Costa',
        bio: 'Desenvolvedor Mobile apaixonado por criar apps nativos e h√≠bridos. Especialista em React Native e desenvolvimento iOS/Android.',
        skills: ['React Native', 'iOS', 'Android', 'JavaScript', 'TypeScript', 'Firebase'],
        experience: '3+ anos desenvolvendo aplica√ß√µes mobile',
        education: 'T√©cnico em Inform√°tica - SENAI',
        company: 'MobileDev',
        jobTitle: 'Mobile Developer',
        location: 'Rio de Janeiro, RJ',
        timezone: 'America/Sao_Paulo',
        isAvailable: true,
        hourlyRate: 100.00,
        portfolio: [
          'https://github.com/pedrocosta',
          'https://pedrocosta.dev',
          'https://apps.apple.com/developer/pedrocosta'
        ],
        socialLinks: {
          github: 'https://github.com/pedrocosta',
          linkedin: 'https://linkedin.com/in/pedrocosta'
        }
      }
    }),
    prisma.userProfile.create({
      data: {
        userId: users[4].id, // Ana
        displayName: 'Ana Oliveira',
        bio: 'Desenvolvedora Backend focada em APIs robustas e escal√°veis. Experi√™ncia com Python, Django e microsservi√ßos.',
        skills: ['Python', 'Django', 'PostgreSQL', 'Redis', 'Docker', 'Kubernetes'],
        experience: '2+ anos desenvolvendo APIs e sistemas backend',
        education: 'Sistemas de Informa√ß√£o - UFSJ',
        company: 'BackendTech',
        jobTitle: 'Backend Developer',
        location: 'Juiz de Fora, MG',
        timezone: 'America/Sao_Paulo',
        isAvailable: false,
        hourlyRate: 90.00,
        portfolio: [
          'https://github.com/anaoliveira',
          'https://anaoliveira.dev'
        ],
        socialLinks: {
          github: 'https://github.com/anaoliveira',
          linkedin: 'https://linkedin.com/in/anaoliveira'
        }
      }
    })
  ])

  // Criar conex√µes entre usu√°rios
  console.log('üîó Criando conex√µes...')
  const connections = await Promise.all([
    // Jo√£o e Maria s√£o conectados
    prisma.connection.create({
      data: {
        requesterId: users[1].id,
        recipientId: users[2].id,
        status: 'ACCEPTED',
        message: 'Ol√°! Gostaria de conectar para futuras colabora√ß√µes em projetos.'
      }
    }),
    // Jo√£o e Pedro s√£o conectados
    prisma.connection.create({
      data: {
        requesterId: users[1].id,
        recipientId: users[3].id,
        status: 'ACCEPTED',
        message: 'Oi Pedro! Vi seu trabalho com React Native e gostaria de conectar.'
      }
    }),
    // Maria enviou solicita√ß√£o para Ana
    prisma.connection.create({
      data: {
        requesterId: users[2].id,
        recipientId: users[4].id,
        status: 'PENDING',
        message: 'Ol√° Ana! Adorei seu trabalho com Django. Gostaria de conectar!'
      }
    })
  ])

  // Criar posts sociais
  console.log('üìù Criando posts sociais...')
  const posts = await Promise.all([
    prisma.socialPost.create({
      data: {
        authorId: users[1].id,
        content: `üöÄ Acabei de finalizar um projeto incr√≠vel usando React + TypeScript + Node.js!

Principais tecnologias utilizadas:
‚Ä¢ Frontend: React 18, TypeScript, Tailwind CSS
‚Ä¢ Backend: Node.js, Express, Prisma ORM
‚Ä¢ Banco: PostgreSQL
‚Ä¢ Deploy: Vercel + Railway

O projeto √© uma plataforma de gest√£o de tarefas com funcionalidades avan√ßadas como:
‚úÖ Autentica√ß√£o JWT
‚úÖ Upload de arquivos
‚úÖ Notifica√ß√µes em tempo real
‚úÖ Dashboard responsivo
‚úÖ API RESTful completa

Fiquei muito satisfeito com o resultado! Alguma d√∫vida sobre as tecnologias utilizadas? ü§î

#React #TypeScript #NodeJS #FullStack #WebDevelopment`,
        type: 'PROJECT',
        tags: ['react', 'typescript', 'nodejs', 'fullstack', 'webdev'],
        visibility: 'PUBLIC'
      }
    }),
    prisma.socialPost.create({
      data: {
        authorId: users[2].id,
        content: `üé® Compartilhando algumas dicas de UX que aprendi trabalhando com Design Systems:

üí° **Consist√™ncia √© fundamental**
- Use componentes reutiliz√°veis
- Mantenha padr√µes de espa√ßamento
- Defina uma hierarquia visual clara

üí° **Acessibilidade n√£o √© opcional**
- Contraste adequado (m√≠nimo 4.5:1)
- Navega√ß√£o por teclado
- Textos alternativos para imagens

üí° **Teste com usu√°rios reais**
- Prot√≥tipos s√£o √≥timos para valida√ß√£o
- Feedback direto √© insubstitu√≠vel
- Itera√ß√£o cont√≠nua melhora o resultado

Qual dica voc√™ gostaria que eu detalhasse mais? ü§î

#UXDesign #DesignSystems #Accessibility #UserExperience`,
        type: 'TIP',
        tags: ['ux', 'design', 'accessibility', 'designsystems'],
        visibility: 'PUBLIC'
      }
    }),
    prisma.socialPost.create({
      data: {
        authorId: users[3].id,
        content: `üì± Dica r√°pida para desenvolvedores React Native:

Estou trabalhando em um projeto React Native e precisando de dicas de debugging! üöÄ

Algu√©m tem sugest√µes de ferramentas ou t√©cnicas que funcionaram bem para voc√™s? ü§î

#ReactNative #MobileDevelopment #Debugging #Tips`,
        type: 'TIP',
        tags: ['reactnative', 'mobile', 'debugging', 'tips'],
        visibility: 'PUBLIC'
      }
    }),
    prisma.socialPost.create({
      data: {
        authorId: users[1].id,
        content: `ü§î Pergunta para a comunidade:

Estou pensando em migrar um projeto de JavaScript para TypeScript. O projeto tem cerca de 50 arquivos e √© usado em produ√ß√£o.

Algu√©m j√° fez essa migra√ß√£o? Quais foram os principais desafios? 

Estou especialmente interessado em:
‚Ä¢ Estrat√©gias de migra√ß√£o gradual
‚Ä¢ Ferramentas para automatizar o processo
‚Ä¢ Como lidar com bibliotecas que n√£o t√™m tipos
‚Ä¢ Tempo estimado para um projeto desse tamanho

Obrigado pelas dicas! üôè

#TypeScript #Migration #JavaScript #WebDevelopment`,
        type: 'QUESTION',
        tags: ['typescript', 'migration', 'javascript', 'webdev'],
        visibility: 'PUBLIC'
      }
    }),
    prisma.socialPost.create({
      data: {
        authorId: users[2].id,
        content: `üéâ Conquista desbloqueada: "Designer Verificado" ‚úÖ

Ap√≥s 6 meses de trabalho consistente e feedback positivo da comunidade, finalmente consegui a verifica√ß√£o!

Isso significa muito para mim, pois representa:
‚Ä¢ Reconhecimento da qualidade do meu trabalho
‚Ä¢ Confian√ßa da comunidade
‚Ä¢ Oportunidades de projetos maiores
‚Ä¢ Networking com outros profissionais

Obrigada a todos que apoiaram e colaboraram! üôè

Para quem est√° come√ßando: persist√™ncia e qualidade sempre valem a pena! üí™

#Achievement #DesignerVerified #Community #Success`,
        type: 'ACHIEVEMENT',
        tags: ['achievement', 'verified', 'design', 'success'],
        visibility: 'PUBLIC'
      }
    })
  ])

  // Criar coment√°rios nos posts
  console.log('üí¨ Criando coment√°rios...')
  const comments = await Promise.all([
    prisma.socialComment.create({
      data: {
        postId: posts[0].id,
        authorId: users[2].id,
        content: 'Parab√©ns pelo projeto! A interface ficou muito limpa e intuitiva. üé®'
      }
    }),
    prisma.socialComment.create({
      data: {
        postId: posts[0].id,
        authorId: users[3].id,
        content: 'Muito bom! Como voc√™ fez para implementar as notifica√ß√µes em tempo real? ü§î'
      }
    }),
    prisma.socialComment.create({
      data: {
        postId: posts[0].id,
        authorId: users[1].id,
        content: 'Obrigado! Usei Socket.io para as notifica√ß√µes. Se quiser, posso detalhar a implementa√ß√£o! üòä'
      }
    }),
    prisma.socialComment.create({
      data: {
        postId: posts[1].id,
        authorId: users[1].id,
        content: 'Excelentes dicas! A parte de acessibilidade √© realmente crucial. üëè'
      }
    }),
    prisma.socialComment.create({
      data: {
        postId: posts[2].id,
        authorId: users[1].id,
        content: 'Essa dica salvou minha vida hoje! Obrigado por compartilhar! üôè'
      }
    })
  ])

  // Criar likes nos posts e coment√°rios
  console.log('‚ù§Ô∏è Criando likes...')
  const likes = await Promise.all([
    // Likes no primeiro post
    prisma.socialLike.create({
      data: {
        userId: users[2].id,
        postId: posts[0].id
      }
    }),
    prisma.socialLike.create({
      data: {
        userId: users[3].id,
        postId: posts[0].id
      }
    }),
    prisma.socialLike.create({
      data: {
        userId: users[4].id,
        postId: posts[0].id
      }
    }),
    // Likes no segundo post
    prisma.socialLike.create({
      data: {
        userId: users[1].id,
        postId: posts[1].id
      }
    }),
    prisma.socialLike.create({
      data: {
        userId: users[3].id,
        postId: posts[1].id
      }
    }),
    // Likes no terceiro post
    prisma.socialLike.create({
      data: {
        userId: users[1].id,
        postId: posts[2].id
      }
    }),
    prisma.socialLike.create({
      data: {
        userId: users[2].id,
        postId: posts[2].id
      }
    }),
    // Likes em coment√°rios
    prisma.socialLike.create({
      data: {
        userId: users[1].id,
        commentId: comments[0].id
      }
    }),
    prisma.socialLike.create({
      data: {
        userId: users[3].id,
        commentId: comments[0].id
      }
    })
  ])

  // Atualizar contadores dos posts
  console.log('üìä Atualizando contadores...')
  await Promise.all([
    prisma.socialPost.update({
      where: { id: posts[0].id },
      data: {
        likeCount: 3,
        commentCount: 3
      }
    }),
    prisma.socialPost.update({
      where: { id: posts[1].id },
      data: {
        likeCount: 2,
        commentCount: 1
      }
    }),
    prisma.socialPost.update({
      where: { id: posts[2].id },
      data: {
        likeCount: 2,
        commentCount: 1
      }
    }),
    prisma.socialPost.update({
      where: { id: posts[3].id },
      data: {
        likeCount: 0,
        commentCount: 0
      }
    }),
    prisma.socialPost.update({
      where: { id: posts[4].id },
      data: {
        likeCount: 0,
        commentCount: 0
      }
    })
  ])

  console.log('‚úÖ Seed da rede social conclu√≠do com sucesso!')
  console.log(`üìä Dados criados:`)
  console.log(`   üë• Usu√°rios: ${users.length}`)
  console.log(`   üë§ Perfis: ${profiles.length}`)
  console.log(`   üîó Conex√µes: ${connections.length}`)
  console.log(`   üìù Posts: ${posts.length}`)
  console.log(`   üí¨ Coment√°rios: ${comments.length}`)
  console.log(`   ‚ù§Ô∏è Likes: ${likes.length}`)
}

main()
  .catch((e) => {
    console.error('‚ùå Erro durante o seed:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
